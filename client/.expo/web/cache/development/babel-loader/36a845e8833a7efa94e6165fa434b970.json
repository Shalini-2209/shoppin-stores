{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\mobile-app\\\\client\\\\src\\\\screens\\\\ChoosePic.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport AddBoxIcon from \"@material-ui/icons/AddBox\";\nimport { IconButton, Grid } from \"@material-ui/core\";\nimport Constants from \"expo-constants\";\nexport default function ProductImg(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var imgInputRef = useRef(null);\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== \"web\")) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== \"granted\") {\n                alert(\"Sorry, we need camera roll permissions to make this work!\");\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage() {\n    var result, imgChosen;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n              imgChosen = imgInputRef.current.attributes.value.nodeValue;\n\n              if (imgChosen) {\n                props.onImgAdded(imgChosen);\n              }\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, image && React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, React.createElement(\"span\", {\n    ref: imgInputRef,\n    value: image,\n    id: \"idforSpan\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  })), React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, React.createElement(IconButton, {\n    \"aria-label\": \"upload picture\",\n    component: \"span\",\n    onClick: pickImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, React.createElement(AddBoxIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }))), React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, image && React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: 200,\n      height: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }), React.createElement(\"span\", {\n    ref: imgInputRef,\n    value: image,\n    id: \"idforSpan\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"sources":["D:/mobile-app/client/src/screens/ChoosePic.js"],"names":["React","useState","useEffect","useRef","ImagePicker","AddBoxIcon","IconButton","Grid","Constants","ProductImg","props","image","setImage","imgInputRef","Platform","OS","requestMediaLibraryPermissionsAsync","status","alert","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","console","log","cancelled","uri","imgChosen","current","attributes","value","nodeValue","onImgAdded","flex","alignItems","justifyContent","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Button, Image, View, Platform } from \"react-native\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\nimport AddBoxIcon from \"@material-ui/icons/AddBox\";\r\nimport { IconButton, Grid } from \"@material-ui/core\";\r\nimport Constants from \"expo-constants\";\r\n\r\nexport default function ProductImg(props) {\r\n  const [image, setImage] = useState(null);\r\n  const imgInputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (Platform.OS !== \"web\") {\r\n        const {\r\n          status,\r\n        } = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n        if (status !== \"granted\") {\r\n          alert(\"Sorry, we need camera roll permissions to make this work!\");\r\n        }\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const pickImage = async () => {\r\n    let result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n      allowsEditing: true,\r\n      aspect: [4, 3],\r\n      quality: 1,\r\n    });\r\n\r\n    console.log(result);\r\n\r\n    if (!result.cancelled) {\r\n      setImage(result.uri);\r\n      const imgChosen = imgInputRef.current.attributes.value.nodeValue;\r\n      // console.log(\"Ref:\", imgInputRef);\r\n      // console.log(\"Id: \", imgInputRef.current.id);\r\n      // console.log(\"Value: \", imgInputRef.current.attributes.value.nodeValue);\r\n      if (imgChosen) {\r\n        props.onImgAdded(imgChosen);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n        {image && (\r\n          <View>\r\n            <span ref={imgInputRef} value={image} id=\"idforSpan\"></span>\r\n          </View>\r\n        )}\r\n\r\n        {/* <Button\r\n          title=\"Pick an image from camera roll\"\r\n          // color=\"#db7093\"\r\n          color=\"black\"\r\n          onPress={pickImage}\r\n        /> */}\r\n\r\n        <Grid container spacing={1} alignItems=\"flex-end\">\r\n          <Grid item>\r\n            <IconButton\r\n              aria-label=\"upload picture\"\r\n              component=\"span\"\r\n              onClick={pickImage}\r\n            >\r\n              <AddBoxIcon />\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid item>\r\n            {image && (\r\n              <View>\r\n                <Image\r\n                  source={{ uri: image }}\r\n                  style={{ width: 200, height: 200 }}\r\n                />\r\n                <span ref={imgInputRef} value={image} id=\"idforSpan\"></span>\r\n              </View>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        {/* {image && <Button title={image} />} */}\r\n      </View>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}