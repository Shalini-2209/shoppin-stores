{"ast":null,"code":"var _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _require = require('fs'),\n    readFileSync = _require.readFileSync;\n\nvar dotenv = require('dotenv');\n\nfunction parseDotenvFile(path) {\n  var verbose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var content;\n\n  try {\n    content = readFileSync(path);\n  } catch (error) {\n    if (verbose) {\n      console.error('react-native-dotenv', error);\n    }\n\n    return {};\n  }\n\n  return dotenv.parse(content);\n}\n\nmodule.exports = function (_ref) {\n  var t = _ref.types;\n  return {\n    name: 'dotenv-import',\n    pre: function pre() {\n      this.opts = _objectSpread({\n        moduleName: '@env',\n        path: '.env',\n        whitelist: null,\n        blacklist: null,\n        safe: false,\n        allowUndefined: true\n      }, this.opts);\n      var babelMode = process.env.BABEL_ENV || process.env.NODE_ENV || 'development';\n\n      if (this.opts.safe) {\n        var parsed = parseDotenvFile(this.opts.path, this.opts.verbose);\n        var modeParsed = parseDotenvFile(this.opts.path + '.' + babelMode);\n        this.env = _extends(parsed, modeParsed);\n      } else {\n        dotenv.config({\n          path: this.opts.path + '.' + babelMode,\n          silent: true\n        });\n        dotenv.config({\n          path: this.opts.path\n        });\n        this.env = process.env;\n      }\n    },\n    visitor: {\n      ImportDeclaration: function ImportDeclaration(path, _ref2) {\n        var _this = this;\n\n        var opts = _ref2.opts;\n\n        if (path.node.source.value === opts.moduleName) {\n          path.node.specifiers.forEach(function (specifier, idx) {\n            if (specifier.type === 'ImportDefaultSpecifier') {\n              throw path.get('specifiers')[idx].buildCodeFrameError('Default import is not supported');\n            }\n\n            if (specifier.type === 'ImportNamespaceSpecifier') {\n              throw path.get('specifiers')[idx].buildCodeFrameError('Wildcard import is not supported');\n            }\n\n            if (specifier.imported && specifier.local) {\n              var importedId = specifier.imported.name;\n              var localId = specifier.local.name;\n\n              if (Array.isArray(opts.whitelist) && !opts.whitelist.includes(importedId)) {\n                throw path.get('specifiers')[idx].buildCodeFrameError(\"\\\"\" + importedId + \"\\\" was not whitelisted\");\n              }\n\n              if (Array.isArray(opts.blacklist) && opts.blacklist.includes(importedId)) {\n                throw path.get('specifiers')[idx].buildCodeFrameError(\"\\\"\" + importedId + \"\\\" was blacklisted\");\n              }\n\n              if (!opts.allowUndefined && !Object.prototype.hasOwnProperty.call(_this.env, importedId)) {\n                throw path.get('specifiers')[idx].buildCodeFrameError(\"\\\"\" + importedId + \"\\\" is not defined in \" + opts.path);\n              }\n\n              var binding = path.scope.getBinding(localId);\n              binding.referencePaths.forEach(function (refPath) {\n                refPath.replaceWith(t.valueToNode(_this.env[importedId]));\n              });\n            }\n          });\n          path.remove();\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["D:/mobile-app/client/node_modules/react-native-dotenv/index.js"],"names":["require","readFileSync","dotenv","parseDotenvFile","path","verbose","content","error","console","parse","module","exports","t","types","name","pre","opts","moduleName","whitelist","blacklist","safe","allowUndefined","babelMode","process","env","BABEL_ENV","NODE_ENV","parsed","modeParsed","config","silent","visitor","ImportDeclaration","node","source","value","specifiers","forEach","specifier","idx","type","get","buildCodeFrameError","imported","local","importedId","localId","Array","isArray","includes","Object","prototype","hasOwnProperty","call","binding","scope","getBinding","referencePaths","refPath","replaceWith","valueToNode","remove"],"mappings":"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","sourcesContent":["const {readFileSync} = require('fs')\r\nconst dotenv = require('dotenv')\r\n\r\nfunction parseDotenvFile(path, verbose = false) {\r\n  let content\r\n\r\n  try {\r\n    content = readFileSync(path)\r\n  } catch (error) {\r\n    // The env file does not exist.\r\n    if (verbose) {\r\n      console.error('react-native-dotenv', error)\r\n    }\r\n\r\n    return {}\r\n  }\r\n\r\n  return dotenv.parse(content)\r\n}\r\n\r\nmodule.exports = ({types: t}) => ({\r\n  name: 'dotenv-import',\r\n\r\n  pre() {\r\n    this.opts = {\r\n      moduleName: '@env',\r\n      path: '.env',\r\n      whitelist: null,\r\n      blacklist: null,\r\n      safe: false,\r\n      allowUndefined: true,\r\n      ...this.opts\r\n    }\r\n\r\n    const babelMode = process.env.BABEL_ENV || process.env.NODE_ENV || 'development'\r\n    if (this.opts.safe) {\r\n      const parsed = parseDotenvFile(this.opts.path, this.opts.verbose)\r\n      const modeParsed = parseDotenvFile(this.opts.path + '.' + babelMode)\r\n      this.env = Object.assign(parsed, modeParsed)\r\n    } else {\r\n      dotenv.config({\r\n        path: this.opts.path + '.' + babelMode,\r\n        silent: true\r\n      })\r\n      dotenv.config({\r\n        path: this.opts.path\r\n      })\r\n      this.env = process.env\r\n    }\r\n  },\r\n\r\n  visitor: {\r\n    ImportDeclaration(path, {opts}) {\r\n      if (path.node.source.value === opts.moduleName) {\r\n        path.node.specifiers.forEach((specifier, idx) => {\r\n          if (specifier.type === 'ImportDefaultSpecifier') {\r\n            throw path.get('specifiers')[idx].buildCodeFrameError('Default import is not supported')\r\n          }\r\n\r\n          if (specifier.type === 'ImportNamespaceSpecifier') {\r\n            throw path.get('specifiers')[idx].buildCodeFrameError('Wildcard import is not supported')\r\n          }\r\n\r\n          if (specifier.imported && specifier.local) {\r\n            const importedId = specifier.imported.name\r\n            const localId = specifier.local.name\r\n\r\n            if (Array.isArray(opts.whitelist) && !opts.whitelist.includes(importedId)) {\r\n              throw path.get('specifiers')[idx].buildCodeFrameError(`\"${importedId}\" was not whitelisted`)\r\n            }\r\n\r\n            if (Array.isArray(opts.blacklist) && opts.blacklist.includes(importedId)) {\r\n              throw path.get('specifiers')[idx].buildCodeFrameError(`\"${importedId}\" was blacklisted`)\r\n            }\r\n\r\n            if (!opts.allowUndefined && !Object.prototype.hasOwnProperty.call(this.env, importedId)) {\r\n              throw path.get('specifiers')[idx].buildCodeFrameError(`\"${importedId}\" is not defined in ${opts.path}`)\r\n            }\r\n\r\n            const binding = path.scope.getBinding(localId)\r\n            binding.referencePaths.forEach(refPath => {\r\n              refPath.replaceWith(t.valueToNode(this.env[importedId]))\r\n            })\r\n          }\r\n        })\r\n\r\n        path.remove()\r\n      }\r\n    }\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"script"}