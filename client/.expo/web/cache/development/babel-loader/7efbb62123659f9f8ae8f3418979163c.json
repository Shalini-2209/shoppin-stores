{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { isNumber, isString } from '@react-native-firebase/app/lib/common';\nimport { createModuleNamespace, FirebaseModule, getFirebaseRoot } from '@react-native-firebase/app/lib/internal';\nimport StorageReference from \"./StorageReference\";\nimport StorageStatics from \"./StorageStatics\";\nimport { getGsUrlParts, getHttpUrlParts, handleStorageEvent } from \"./utils\";\nimport version from \"./version\";\nvar namespace = 'storage';\nvar nativeEvents = ['storage_event'];\nvar nativeModuleName = 'RNFBStorageModule';\n\nvar FirebaseStorageModule = function (_FirebaseModule) {\n  _inherits(FirebaseStorageModule, _FirebaseModule);\n\n  var _super = _createSuper(FirebaseStorageModule);\n\n  function FirebaseStorageModule(app, config, bucketUrl) {\n    var _this;\n\n    _classCallCheck(this, FirebaseStorageModule);\n\n    _this = _super.call(this, app, config, bucketUrl);\n\n    if (bucketUrl === undefined) {\n      _this._customUrlOrRegion = \"gs://\" + app.options.storageBucket;\n    } else if (!isString(bucketUrl) || !bucketUrl.startsWith('gs://')) {\n      throw new Error(\"firebase.app().storage(*) bucket url must be a string and begin with 'gs://'\");\n    }\n\n    _this.emitter.addListener(_this.eventNameForApp(nativeEvents[0]), handleStorageEvent.bind(null, _assertThisInitialized(_this)));\n\n    _this._maxUploadRetryTime = _this.native.maxUploadRetryTime || 0;\n    _this._maxDownloadRetryTime = _this.native.maxDownloadRetryTime || 0;\n    _this._maxOperationRetryTime = _this.native.maxOperationRetryTime || 0;\n    return _this;\n  }\n\n  _createClass(FirebaseStorageModule, [{\n    key: \"ref\",\n    value: function ref() {\n      var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n\n      if (!isString(path)) {\n        throw new Error(\"firebase.storage().ref(*) 'path' must be a string value.\");\n      }\n\n      return new StorageReference(this, path);\n    }\n  }, {\n    key: \"refFromURL\",\n    value: function refFromURL(url) {\n      if (!isString(url) || !url.startsWith('gs://') && !url.startsWith('http')) {\n        throw new Error(\"firebase.storage().refFromURL(*) 'url' must be a string value and begin with 'gs://' or 'https://'.\");\n      }\n\n      var path;\n      var bucket;\n\n      if (url.startsWith('http')) {\n        var parts = getHttpUrlParts(url);\n\n        if (!parts) {\n          throw new Error(\"firebase.storage().refFromURL(*) unable to parse 'url', ensure it's a valid storage url'.\");\n        }\n\n        bucket = parts.bucket;\n        path = parts.path;\n      } else {\n        var _getGsUrlParts = getGsUrlParts(url);\n\n        bucket = _getGsUrlParts.bucket;\n        path = _getGsUrlParts.path;\n      }\n\n      var storageInstance = this.app.storage(bucket);\n      return new StorageReference(storageInstance, path);\n    }\n  }, {\n    key: \"setMaxOperationRetryTime\",\n    value: function setMaxOperationRetryTime(time) {\n      if (!isNumber(time)) {\n        throw new Error(\"firebase.storage().setMaxOperationRetryTime(*) 'time' must be a number value.\");\n      }\n\n      this._maxOperationRetryTime = time;\n      return this.native.setMaxOperationRetryTime(time);\n    }\n  }, {\n    key: \"setMaxUploadRetryTime\",\n    value: function setMaxUploadRetryTime(time) {\n      if (!isNumber(time)) {\n        throw new Error(\"firebase.storage().setMaxUploadRetryTime(*) 'time' must be a number value.\");\n      }\n\n      this._maxUploadRetryTime = time;\n      return this.native.setMaxUploadRetryTime(time);\n    }\n  }, {\n    key: \"setMaxDownloadRetryTime\",\n    value: function setMaxDownloadRetryTime(time) {\n      if (!isNumber(time)) {\n        throw new Error(\"firebase.storage().setMaxDownloadRetryTime(*) 'time' must be a number value.\");\n      }\n\n      this._maxDownloadRetryTime = time;\n      return this.native.setMaxDownloadRetryTime(time);\n    }\n  }, {\n    key: \"maxUploadRetryTime\",\n    get: function get() {\n      return this._maxUploadRetryTime;\n    }\n  }, {\n    key: \"maxDownloadRetryTime\",\n    get: function get() {\n      return this._maxDownloadRetryTime;\n    }\n  }, {\n    key: \"maxOperationRetryTime\",\n    get: function get() {\n      return this._maxOperationRetryTime;\n    }\n  }]);\n\n  return FirebaseStorageModule;\n}(FirebaseModule);\n\nexport var SDK_VERSION = version;\nexport var STATICS = StorageStatics;\nexport default createModuleNamespace({\n  statics: StorageStatics,\n  version: version,\n  namespace: namespace,\n  nativeEvents: nativeEvents,\n  nativeModuleName: nativeModuleName,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: true,\n  disablePrependCustomUrlOrRegion: true,\n  ModuleClass: FirebaseStorageModule\n});\nexport var firebase = getFirebaseRoot();","map":{"version":3,"sources":["D:/mobile-app/client/node_modules/@react-native-firebase/storage/lib/index.js"],"names":["isNumber","isString","createModuleNamespace","FirebaseModule","getFirebaseRoot","StorageReference","StorageStatics","getGsUrlParts","getHttpUrlParts","handleStorageEvent","version","namespace","nativeEvents","nativeModuleName","FirebaseStorageModule","app","config","bucketUrl","undefined","_customUrlOrRegion","options","storageBucket","startsWith","Error","emitter","addListener","eventNameForApp","bind","_maxUploadRetryTime","native","maxUploadRetryTime","_maxDownloadRetryTime","maxDownloadRetryTime","_maxOperationRetryTime","maxOperationRetryTime","path","url","bucket","parts","storageInstance","storage","time","setMaxOperationRetryTime","setMaxUploadRetryTime","setMaxDownloadRetryTime","SDK_VERSION","STATICS","statics","hasMultiAppSupport","hasCustomUrlOrRegionSupport","disablePrependCustomUrlOrRegion","ModuleClass","firebase"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isNumber, isString } from '@react-native-firebase/app/lib/common';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport StorageReference from './StorageReference';\nimport StorageStatics from './StorageStatics';\nimport { getGsUrlParts, getHttpUrlParts, handleStorageEvent } from './utils';\nimport version from './version';\n\nconst namespace = 'storage';\nconst nativeEvents = ['storage_event'];\nconst nativeModuleName = 'RNFBStorageModule';\n\nclass FirebaseStorageModule extends FirebaseModule {\n  constructor(app, config, bucketUrl) {\n    super(app, config, bucketUrl);\n    if (bucketUrl === undefined) {\n      this._customUrlOrRegion = `gs://${app.options.storageBucket}`;\n    } else if (!isString(bucketUrl) || !bucketUrl.startsWith('gs://')) {\n      throw new Error(\n        \"firebase.app().storage(*) bucket url must be a string and begin with 'gs://'\",\n      );\n    }\n\n    this.emitter.addListener(\n      this.eventNameForApp(nativeEvents[0]),\n      handleStorageEvent.bind(null, this),\n    );\n\n    this._maxUploadRetryTime = this.native.maxUploadRetryTime || 0;\n    this._maxDownloadRetryTime = this.native.maxDownloadRetryTime || 0;\n    this._maxOperationRetryTime = this.native.maxOperationRetryTime || 0;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setmaxuploadretrytime\n   */\n  get maxUploadRetryTime() {\n    return this._maxUploadRetryTime;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setmaxdownloadretrytime\n   */\n  get maxDownloadRetryTime() {\n    return this._maxDownloadRetryTime;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#maxoperationretrytime\n   */\n  get maxOperationRetryTime() {\n    return this._maxOperationRetryTime;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#ref\n   */\n  ref(path = '/') {\n    if (!isString(path)) {\n      throw new Error(\"firebase.storage().ref(*) 'path' must be a string value.\");\n    }\n\n    return new StorageReference(this, path);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#refFromURL\n   */\n  refFromURL(url) {\n    if (!isString(url) || (!url.startsWith('gs://') && !url.startsWith('http'))) {\n      throw new Error(\n        \"firebase.storage().refFromURL(*) 'url' must be a string value and begin with 'gs://' or 'https://'.\",\n      );\n    }\n\n    let path;\n    let bucket;\n\n    if (url.startsWith('http')) {\n      const parts = getHttpUrlParts(url);\n      if (!parts) {\n        throw new Error(\n          \"firebase.storage().refFromURL(*) unable to parse 'url', ensure it's a valid storage url'.\",\n        );\n      }\n      ({ bucket, path } = parts);\n    } else {\n      ({ bucket, path } = getGsUrlParts(url));\n    }\n\n    const storageInstance = this.app.storage(bucket);\n    return new StorageReference(storageInstance, path);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxOperationRetryTime\n   */\n  setMaxOperationRetryTime(time) {\n    if (!isNumber(time)) {\n      throw new Error(\n        \"firebase.storage().setMaxOperationRetryTime(*) 'time' must be a number value.\",\n      );\n    }\n\n    this._maxOperationRetryTime = time;\n    return this.native.setMaxOperationRetryTime(time);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxUploadRetryTime\n   */\n  setMaxUploadRetryTime(time) {\n    if (!isNumber(time)) {\n      throw new Error(\"firebase.storage().setMaxUploadRetryTime(*) 'time' must be a number value.\");\n    }\n\n    this._maxUploadRetryTime = time;\n    return this.native.setMaxUploadRetryTime(time);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxDownloadRetryTime\n   */\n  setMaxDownloadRetryTime(time) {\n    if (!isNumber(time)) {\n      throw new Error(\n        \"firebase.storage().setMaxDownloadRetryTime(*) 'time' must be a number value.\",\n      );\n    }\n\n    this._maxDownloadRetryTime = time;\n    return this.native.setMaxDownloadRetryTime(time);\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/storage';\nexport const SDK_VERSION = version;\n\n// import { STATICS } from '@react-native-firebase/storage';\nexport const STATICS = StorageStatics;\n\n// import storage from '@react-native-firebase/storage';\n// storage().X(...);\nexport default createModuleNamespace({\n  statics: StorageStatics,\n  version,\n  namespace,\n  nativeEvents,\n  nativeModuleName,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: true,\n  disablePrependCustomUrlOrRegion: true,\n  ModuleClass: FirebaseStorageModule,\n});\n\n// import storage, { firebase } from '@react-native-firebase/storage';\n// storage().X(...);\n// firebase.storage().X(...);\nexport const firebase = getFirebaseRoot();\n"]},"metadata":{},"sourceType":"module"}