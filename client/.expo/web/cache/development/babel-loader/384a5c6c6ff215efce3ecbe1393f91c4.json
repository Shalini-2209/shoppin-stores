{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { isNull, isObject, isString } from '@react-native-firebase/app/lib/common';\nimport { NativeFirebaseError } from '@react-native-firebase/app/lib/internal';\nvar SETTABLE_FIELDS = ['cacheControl', 'contentDisposition', 'contentEncoding', 'contentLanguage', 'contentType', 'customMetadata'];\nexport function handleStorageEvent(storageInstance, event) {\n  var taskId, eventName, body;\n  return _regeneratorRuntime.async(function handleStorageEvent$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          taskId = event.taskId, eventName = event.eventName;\n          body = event.body || {};\n\n          if (!body.error) {\n            _context.next = 6;\n            break;\n          }\n\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(NativeFirebaseError.fromEvent(body.error, storageInstance._config.namespace));\n\n        case 5:\n          body.error = _context.sent;\n\n        case 6:\n          storageInstance.emitter.emit(storageInstance.eventNameForApp(taskId, eventName), body);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getHttpUrlParts(url) {\n  var decoded = decodeURIComponent(url);\n  var parts = decoded.match(/\\/b\\/(.*)\\/o\\/([a-zA-Z0-9./\\-_]+)(.*)/);\n\n  if (!parts || parts.length < 3) {\n    return null;\n  }\n\n  return {\n    bucket: \"gs://\" + parts[1],\n    path: parts[2]\n  };\n}\nexport function getGsUrlParts(url) {\n  var bucket = url.substring(0, url.indexOf('/', 5)) || url;\n  var path = (url.indexOf('/', 5) > -1 ? url.substring(url.indexOf('/', 5) + 1, url.length) : '/') || '/';\n  return {\n    bucket: bucket,\n    path: path\n  };\n}\nexport function validateMetadata(metadata) {\n  if (!isObject(metadata)) {\n    throw new Error('firebase.storage.SettableMetadata must be an object value if provided.');\n  }\n\n  var metadataEntries = Object.entries(metadata);\n\n  for (var i = 0; i < metadataEntries.length; i++) {\n    var _metadataEntries$i = _slicedToArray(metadataEntries[i], 2),\n        key = _metadataEntries$i[0],\n        value = _metadataEntries$i[1];\n\n    if (!SETTABLE_FIELDS.includes(key)) {\n      throw new Error(\"firebase.storage.SettableMetadata unknown property '\" + key + \"' provided for metadata.\");\n    }\n\n    if (key !== 'customMetadata') {\n      if (!isString(value) && !isNull(value)) {\n        throw new Error(\"firebase.storage.SettableMetadata invalid property '\" + key + \"' should be a string or null value.\");\n      }\n    } else if (!isObject(value)) {\n      throw new Error('firebase.storage.SettableMetadata.customMetadata must be an object of keys and string values.');\n    }\n  }\n\n  return metadata;\n}","map":{"version":3,"sources":["D:/mobile-app/client/node_modules/@react-native-firebase/storage/lib/utils.js"],"names":["isNull","isObject","isString","NativeFirebaseError","SETTABLE_FIELDS","handleStorageEvent","storageInstance","event","taskId","eventName","body","error","fromEvent","_config","namespace","emitter","emit","eventNameForApp","getHttpUrlParts","url","decoded","decodeURIComponent","parts","match","length","bucket","path","getGsUrlParts","substring","indexOf","validateMetadata","metadata","Error","metadataEntries","Object","entries","i","key","value","includes"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isNull, isObject, isString } from '@react-native-firebase/app/lib/common';\nimport { NativeFirebaseError } from '@react-native-firebase/app/lib/internal';\n\nconst SETTABLE_FIELDS = [\n  'cacheControl',\n  'contentDisposition',\n  'contentEncoding',\n  'contentLanguage',\n  'contentType',\n  'customMetadata',\n];\n\nexport async function handleStorageEvent(storageInstance, event) {\n  const { taskId, eventName } = event;\n  const body = event.body || {};\n\n  if (body.error) {\n    body.error = await NativeFirebaseError.fromEvent(body.error, storageInstance._config.namespace);\n  }\n\n  storageInstance.emitter.emit(storageInstance.eventNameForApp(taskId, eventName), body);\n}\n\nexport function getHttpUrlParts(url) {\n  const decoded = decodeURIComponent(url);\n  const parts = decoded.match(/\\/b\\/(.*)\\/o\\/([a-zA-Z0-9./\\-_]+)(.*)/);\n\n  if (!parts || parts.length < 3) {\n    return null;\n  }\n\n  return { bucket: `gs://${parts[1]}`, path: parts[2] };\n}\n\nexport function getGsUrlParts(url) {\n  const bucket = url.substring(0, url.indexOf('/', 5)) || url;\n  const path =\n    (url.indexOf('/', 5) > -1 ? url.substring(url.indexOf('/', 5) + 1, url.length) : '/') || '/';\n\n  return { bucket, path };\n}\n\nexport function validateMetadata(metadata) {\n  if (!isObject(metadata)) {\n    throw new Error('firebase.storage.SettableMetadata must be an object value if provided.');\n  }\n\n  const metadataEntries = Object.entries(metadata);\n\n  for (let i = 0; i < metadataEntries.length; i++) {\n    const [key, value] = metadataEntries[i];\n    // validate keys\n    if (!SETTABLE_FIELDS.includes(key)) {\n      throw new Error(\n        `firebase.storage.SettableMetadata unknown property '${key}' provided for metadata.`,\n      );\n    }\n\n    // validate values\n    if (key !== 'customMetadata') {\n      if (!isString(value) && !isNull(value)) {\n        throw new Error(\n          `firebase.storage.SettableMetadata invalid property '${key}' should be a string or null value.`,\n        );\n      }\n    } else if (!isObject(value)) {\n      throw new Error(\n        'firebase.storage.SettableMetadata.customMetadata must be an object of keys and string values.',\n      );\n    }\n  }\n\n  return metadata;\n}\n"]},"metadata":{},"sourceType":"module"}