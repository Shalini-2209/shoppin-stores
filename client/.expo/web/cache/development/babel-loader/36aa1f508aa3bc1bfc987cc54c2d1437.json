{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Clipboard = void 0;\n\nvar NativeClipboard_1 = __importDefault(require(\"./NativeClipboard\"));\n\nexports.Clipboard = {\n  getString: function getString() {\n    return NativeClipboard_1.default.getString();\n  },\n  setString: function setString(content) {\n    NativeClipboard_1.default.setString(content);\n  },\n  hasString: function hasString() {\n    return NativeClipboard_1.default.hasString();\n  },\n  hasURL: function hasURL() {\n    return NativeClipboard_1.default.hasURL();\n  }\n};","map":{"version":3,"sources":["D:/mobile-app/client/node_modules/@react-native-community/clipboard/dist/Clipboard.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Clipboard","NativeClipboard_1","require","getString","default","setString","content","hasString","hasURL"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,IAAIC,iBAAiB,GAAGR,eAAe,CAACS,OAAO,qBAAR,CAAvC;;AAIAJ,OAAO,CAACE,SAAR,GAAoB;AAShBG,EAAAA,SAAS,EAAE,qBAAY;AACnB,WAAOF,iBAAiB,CAACG,OAAlB,CAA0BD,SAA1B,EAAP;AACH,GAXe;AAqBhBE,EAAAA,SAAS,EAAE,mBAAUC,OAAV,EAAmB;AAC1BL,IAAAA,iBAAiB,CAACG,OAAlB,CAA0BC,SAA1B,CAAoCC,OAApC;AACH,GAvBe;AAiChBC,EAAAA,SAAS,EAAE,qBAAY;AACnB,WAAON,iBAAiB,CAACG,OAAlB,CAA0BG,SAA1B,EAAP;AACH,GAnCe;AA8ChBC,EAAAA,MAAM,EAAE,kBAAY;AAChB,WAAOP,iBAAiB,CAACG,OAAlB,CAA0BI,MAA1B,EAAP;AACH;AAhDe,CAApB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Clipboard = void 0;\nvar NativeClipboard_1 = __importDefault(require(\"./NativeClipboard\"));\n/**\n * `Clipboard` gives you an interface for setting and getting content from Clipboard on both iOS and Android\n */\nexports.Clipboard = {\n    /**\n     * Get content of string type, this method returns a `Promise`, so you can use following code to get clipboard content\n     * ```javascript\n     * async _getContent() {\n     *   var content = await Clipboard.getString();\n     * }\n     * ```\n     */\n    getString: function () {\n        return NativeClipboard_1.default.getString();\n    },\n    /**\n     * Set content of string type. You can use following code to set clipboard content\n     * ```javascript\n     * _setContent() {\n     *   Clipboard.setString('hello world');\n     * }\n     * ```\n     * @param the content to be stored in the clipboard.\n     */\n    setString: function (content) {\n        NativeClipboard_1.default.setString(content);\n    },\n    /**\n     * Returns whether the clipboard has content or is empty.\n     * This method returns a `Promise`, so you can use following code to get clipboard content\n     * ```javascript\n     * async _hasContent() {\n     *   var hasContent = await Clipboard.hasString();\n     * }\n     * ```\n     */\n    hasString: function () {\n        return NativeClipboard_1.default.hasString();\n    },\n    /**\n     * (IOS Only)\n     * Returns whether the clipboard has content or is empty.\n     * This method returns a `Promise`, so you can use following code to get clipboard content\n     * ```javascript\n     * async _hasContent() {\n     *   var hasContent = await Clipboard.hasString();\n     * }\n     * ```\n     */\n    hasURL: function () {\n        return NativeClipboard_1.default.hasURL();\n    },\n};\n"]},"metadata":{},"sourceType":"script"}